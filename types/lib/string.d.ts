export function split<Str extends string, Separator extends string>(value: Str, separator: Separator): Split<Str, Separator>;
export function getFirstChar<Str extends string>(value: Str): GetFirstChar<Str>;
export function getLastChar<Str extends string>(value: Str): GetLastChar<Str>;
export function wrap<Str extends string, Start extends string, End extends string>(value: Str, start: Start, end: End): Wrap<Str, Start, End>;
export function unwrap<Str extends string, Start extends string, End extends string>(value: Str, start: Start, end: End): Unwrap<Str, Start, End>;
export function clean<Str extends string>(value: Str): Clean<Str>;
export type Split<S extends string, SEP extends string> = string extends S ? string[] : S extends `${infer A}${SEP}${infer B}` ? [A, ...B extends "" ? [] : Split<B, SEP>] : SEP extends "" ? [] : [S];
export type GetFirstChar<T extends string> = T extends `${infer F}${string}` ? F : string;
export type GetLastChar<T extends string> = T extends `${infer F}${infer R}` ? R extends "" ? F : GetLastChar<R> : string;
export type Wrap<S extends unknown, Start extends string, End extends string> = S extends string ? `${Start}${S}${End}` : never;
export type Unwrap<S extends string, Start extends string, End extends string> = S extends `${Start}${infer W}${End}` ? `${W}` : S;
export type Clean<T extends string> = T extends `${infer S1}  ${infer S2}` ? Clean<`${S1} ${S2}`> : T extends `${infer S1_1}\n${infer S2_1}` ? Clean<`${S1_1} ${S2_1}`> : T;
export type ReplaceAll<S extends string, From extends string, To extends string> = From extends "" ? S : S extends `${infer R1}${From}${infer R2}` ? `${R1}${To}${ReplaceAll<R2, From, To>}` : S;
